// Code generated by "jade.go"; DO NOT EDIT.

package ui

import (
	"io"

	"github.com/Joker/hpp"
	"github.com/devnull-twitch/sharedjob-server"
)

const (
	stations__4  = `</h1><p>List of all stations</p><table class="table is-fullwidth is-striped"><thead><tr><th>Station</th><th style="width:10%">Inputs</th><th style="width:10%;overflow-wrap:break-word;">Output</th><th>Spawned Job Count</th><th>Total Job Count</th></tr></thead><tbody id="jobs-table">`
	stations__7  = `"><td>`
	stations__9  = `</td><td style="width:10%;overflow-wrap:break-word;">`
	stations__13 = `,&nbsp;`
	stations__15 = `...`
)

func StationsView(pageTitle string, stations map[sharedjob.StationID]*sharedjob.LogicStation, wr io.Writer) {

	r, w := io.Pipe()
	go func() {
		buffer := &WriterAsBuffer{w}

		buffer.WriteString(connections__0)

		htmxTemplateFragmentrMeta := "<meta name=\"htmx-config\" content='{\"useTemplateFragments\":true}'>"
		buffer.WriteString(connections__1)
		buffer.WriteString(htmxTemplateFragmentrMeta)
		buffer.WriteString(connections__2)
		WriteEscString(pageTitle, buffer)
		buffer.WriteString(connections__3)
		WriteEscString(pageTitle, buffer)
		buffer.WriteString(stations__4)

		for _, station := range stations {
			buffer.WriteString(jobs__6)
			WriteAll(station.ID, true, buffer)
			buffer.WriteString(stations__7)
			WriteAll(station.ID, true, buffer)
			buffer.WriteString(jobs__9)

			for index, inputType := range station.AllInputs() {
				if index > 0 {
					buffer.WriteString(stations__13)
				}
				WriteEscString(inputType, buffer)
			}
			buffer.WriteString(stations__9)

			for index, outType := range station.AllOutputs() {
				if index > 6 {
					break
				}
				if index > 0 {
					buffer.WriteString(stations__13)
				}
				if index == 6 {
					buffer.WriteString(stations__15)
				} else {
					WriteEscString(outType, buffer)
				}
			}
			buffer.WriteString(jobs__9)
			WriteAll(countSpawnedJobs(station), true, buffer)
			buffer.WriteString(jobs__9)
			WriteInt(int64(len(station.JobQueue)), buffer)
			buffer.WriteString(connections__7)

		}
		buffer.WriteString(connections__5)

		w.Close()
	}()
	hpp.Format(r, wr)
}
