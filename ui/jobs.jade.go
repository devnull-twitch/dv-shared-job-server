// Code generated by "jade.go"; DO NOT EDIT.

package ui

import (
	"io"

	"github.com/Joker/hpp"
	"github.com/devnull-twitch/sharedjob-server"
)

const (
	jobs__4  = `</h1><p>List of all jobs</p><table class="table is-fullwidth is-striped"><thead><tr><th></th><th>Job ID </th><th>Start Track</th><th>Target Track</th><th>Status </th><th>Assigned user</th><th>Cargo </th><th>No. of cars </th><th>Wage </th></tr></thead><tbody id="jobs-table">`
	jobs__6  = `<tr id="`
	jobs__7  = `"><td><div class="buttons are-small">`
	jobs__8  = `</div></td><td>`
	jobs__9  = `</td><td>`
	jobs__17 = `<button class="button" hx-get="`
	jobs__18 = `" hx-target="#modal-target">Take</button>`
	jobs__20 = `" hx-target="#modal-target">Finish</button>`
	jobs__21 = `<span class="tag">Reserved</span>`
	jobs__22 = `<span class="tag">Active</span>`
	jobs__23 = `<span class="tag">Spawned </span>`
)

func JobsView(pageTitle string, stations map[sharedjob.StationID]*sharedjob.LogicStation, wr io.Writer) {

	r, w := io.Pipe()
	go func() {
		buffer := &WriterAsBuffer{w}

		buffer.WriteString(connections__0)

		htmxTemplateFragmentrMeta := "<meta name=\"htmx-config\" content='{\"useTemplateFragments\":true}'>"
		buffer.WriteString(connections__1)
		buffer.WriteString(htmxTemplateFragmentrMeta)
		buffer.WriteString(connections__2)
		WriteEscString(pageTitle, buffer)
		buffer.WriteString(connections__3)
		WriteEscString(pageTitle, buffer)
		buffer.WriteString(jobs__4)

		for _, station := range stations {
			for _, job := range station.JobQueue {
				buffer.WriteString(jobs__6)
				WriteAll(jobIdAttr(job.ID), true, buffer)
				buffer.WriteString(jobs__7)

				if !job.IsReserved() && job.IsSpawned() {
					buffer.WriteString(jobs__17)
					WriteAll(jobTakeURL(job.ID), true, buffer)
					buffer.WriteString(jobs__18)

				}
				if job.IsActive() {
					buffer.WriteString(jobs__17)
					WriteAll(jobFinishURL(job.ID), true, buffer)
					buffer.WriteString(jobs__20)

				}
				buffer.WriteString(jobs__8)
				WriteEscString(job.StartingTrack, buffer)
				buffer.WriteString(jobs__9)
				WriteEscString(job.TargetTrack, buffer)
				buffer.WriteString(jobs__9)
				WriteEscString(job.ID, buffer)
				buffer.WriteString(jobs__9)

				if job.IsReserved() && !job.IsActive() {
					buffer.WriteString(jobs__21)

				}
				if job.IsActive() {
					buffer.WriteString(jobs__22)

				}
				if job.IsSpawned() {
					buffer.WriteString(jobs__23)

				}
				buffer.WriteString(jobs__9)
				WriteEscString(job.GetAssignedUser(), buffer)
				buffer.WriteString(jobs__9)
				WriteAll(job.CargoType, true, buffer)
				buffer.WriteString(jobs__9)
				WriteInt(int64(job.CarCount), buffer)
				buffer.WriteString(jobs__9)
				WriteInt(int64(job.Wage), buffer)
				buffer.WriteString(connections__7)

			}
		}
		buffer.WriteString(connections__5)

		w.Close()
	}()
	hpp.Format(r, wr)
}
