// Code generated by "jade.go"; DO NOT EDIT.

package ui

import (
	"io"

	"github.com/Joker/hpp"
	"github.com/devnull-twitch/sharedjob-server"
)

const (
	jobrows__0  = `<tbody id="jobs-table" hx-swap-oob="beforeend">`
	jobrows__1  = `</tbody>`
	jobrows__20 = `<div id="`
	jobrows__21 = `" hx-swap-oob="delete"/>`
	jobrows__23 = `" hx-swap-oob="true"><td><div class="buttons are-small">`
)

func JobPartUpdates(changedJobs []*sharedjob.Job, newJobs []*sharedjob.Job, deleteJobID string, wr io.Writer) {

	r, w := io.Pipe()
	go func() {
		buffer := &WriterAsBuffer{w}

		if len(newJobs) > 0 {
			buffer.WriteString(jobrows__0)
			for _, job := range newJobs {
				buffer.WriteString(jobs__6)
				WriteAll(jobIdAttr(job.ID), true, buffer)
				buffer.WriteString(jobs__7)

				if !job.IsReserved() && job.IsSpawned() {
					buffer.WriteString(jobs__17)
					WriteAll(jobTakeURL(job.ID), true, buffer)
					buffer.WriteString(jobs__18)

				}
				if job.IsActive() {
					buffer.WriteString(jobs__17)
					WriteAll(jobFinishURL(job.ID), true, buffer)
					buffer.WriteString(jobs__20)

				}
				buffer.WriteString(jobs__8)
				WriteEscString(job.StartingTrack, buffer)
				buffer.WriteString(jobs__9)
				WriteEscString(job.TargetTrack, buffer)
				buffer.WriteString(jobs__9)
				WriteEscString(job.ID, buffer)
				buffer.WriteString(jobs__9)

				if job.IsReserved() && !job.IsActive() {
					buffer.WriteString(jobs__21)

				}
				if job.IsActive() {
					buffer.WriteString(jobs__22)

				}
				if job.IsSpawned() {
					buffer.WriteString(jobs__23)

				}
				buffer.WriteString(jobs__9)
				WriteEscString(job.GetAssignedUser(), buffer)
				buffer.WriteString(jobs__9)
				WriteAll(job.CargoType, true, buffer)
				buffer.WriteString(jobs__9)
				WriteInt(int64(job.CarCount), buffer)
				buffer.WriteString(jobs__9)
				WriteInt(int64(job.Wage), buffer)
				buffer.WriteString(connections__7)

			}
			buffer.WriteString(jobrows__1)
		}
		if deleteJobID != "" {
			buffer.WriteString(jobrows__20)
			WriteAll(jobIdAttr(deleteJobID), true, buffer)
			buffer.WriteString(jobrows__21)
		}
		if len(changedJobs) > 0 {
			for _, job := range changedJobs {
				buffer.WriteString(jobs__6)
				WriteAll(jobIdAttr(job.ID), true, buffer)
				buffer.WriteString(jobrows__23)

				if !job.IsReserved() && job.IsSpawned() {
					buffer.WriteString(jobs__17)
					WriteAll(jobTakeURL(job.ID), true, buffer)
					buffer.WriteString(jobs__18)

				}
				if job.IsActive() {
					buffer.WriteString(jobs__17)
					WriteAll(jobFinishURL(job.ID), true, buffer)
					buffer.WriteString(jobs__20)

				}
				buffer.WriteString(jobs__8)
				WriteEscString(job.StartingTrack, buffer)
				buffer.WriteString(jobs__9)
				WriteEscString(job.TargetTrack, buffer)
				buffer.WriteString(jobs__9)
				WriteEscString(job.ID, buffer)
				buffer.WriteString(jobs__9)

				if job.IsReserved() && !job.IsActive() {
					buffer.WriteString(jobs__21)

				}
				if job.IsActive() {
					buffer.WriteString(jobs__22)

				}
				if job.IsSpawned() {
					buffer.WriteString(jobs__23)

				}
				buffer.WriteString(jobs__9)
				WriteEscString(job.GetAssignedUser(), buffer)
				buffer.WriteString(jobs__9)
				WriteAll(job.CargoType, true, buffer)
				buffer.WriteString(jobs__9)
				WriteInt(int64(job.CarCount), buffer)
				buffer.WriteString(jobs__9)
				WriteInt(int64(job.Wage), buffer)
				buffer.WriteString(connections__7)

			}
		}

		w.Close()
	}()
	hpp.Format(r, wr)
}
